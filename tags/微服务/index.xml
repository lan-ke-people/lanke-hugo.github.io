<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>微服务 on 烂柯的 Blog</title><link>https://lan-ke-people.github.io/lanke-hugo.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/</link><description>Recent content from 烂柯的 Blog</description><generator>Hugo</generator><language>zh-cn</language><managingEditor>2361303523@qq.com (烂柯)</managingEditor><webMaster>2361303523@qq.com (烂柯)</webMaster><copyright>本博客所有文章除特别声明外，均采用 BY-NC-SA 许可协议。转载请注明出处！</copyright><lastBuildDate>Tue, 19 Aug 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://lan-ke-people.github.io/lanke-hugo.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/index.xml" rel="self" type="application/rss+xml"/><item><title>什么场景下需要用到微服务？</title><link>https://lan-ke-people.github.io/lanke-hugo.github.io/post/%E4%BB%80%E4%B9%88%E5%9C%BA%E6%99%AF%E4%B8%8B%E9%9C%80%E8%A6%81%E7%94%A8%E5%88%B0%E5%BE%AE%E6%9C%8D%E5%8A%A1/</link><pubDate>Tue, 19 Aug 2025 00:00:00 +0000</pubDate><author>2361303523@qq.com (烂柯)</author><guid>https://lan-ke-people.github.io/lanke-hugo.github.io/post/%E4%BB%80%E4%B9%88%E5%9C%BA%E6%99%AF%E4%B8%8B%E9%9C%80%E8%A6%81%E7%94%A8%E5%88%B0%E5%BE%AE%E6%9C%8D%E5%8A%A1/</guid><description>
<![CDATA[<h1>什么场景下需要用到微服务？</h1><p>作者：烂柯（2361303523@qq.com）</p>
        
          <h1 id="一核心摘要什么时候需要考虑微服务">
<a class="header-anchor" href="#%e4%b8%80%e6%a0%b8%e5%bf%83%e6%91%98%e8%a6%81%e4%bb%80%e4%b9%88%e6%97%b6%e5%80%99%e9%9c%80%e8%a6%81%e8%80%83%e8%99%91%e5%be%ae%e6%9c%8d%e5%8a%a1"></a>
一、核心摘要：什么时候需要考虑微服务？
</h1><table>
  <thead>
      <tr>
          <th>维度</th>
          <th>单体架构 (Monolith)</th>
          <th>微服务架构 (Microservices)</th>
          <th>何时考虑微服务</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>开发</td>
          <td>代码统一，简单易懂</td>
          <td>代码分散，跨服务调用复杂</td>
          <td>团队规模大，代码冲突多，构建/编译慢</td>
      </tr>
      <tr>
          <td>部署</td>
          <td>统一部署，启动慢</td>
          <td>独立部署，启动快</td>
          <td>交付压力大，需要频繁、独立发布某些功能</td>
      </tr>
      <tr>
          <td>技术</td>
          <td>技术栈统一</td>
          <td>技术栈灵活，可按需选型</td>
          <td>不同模块有异构技术需求（如AI模块用Python，后台用Java）</td>
      </tr>
      <tr>
          <td>扩展</td>
          <td>整体扩展，资源浪费</td>
          <td>细粒度扩展，节省资源</td>
          <td>流量不均，只有部分服务需要高并发能力（如用户中心vs订单系统）</td>
      </tr>
      <tr>
          <td>容错</td>
          <td>一个故障可能拖垮整个应用</td>
          <td>故障隔离，整体更健壮</td>
          <td>对系统可用性要求极高，不能接受单点故障导致全站宕机</td>
      </tr>
      <tr>
          <td>数据</td>
          <td>单一数据库，强一致性</td>
          <td>多数据库，最终一致性</td>
          <td>业务边界清晰，可以拆分成自治的领域</td>
      </tr>
  </tbody>
</table>
<h1 id="二具体需要引入微服务的场景">
<a class="header-anchor" href="#%e4%ba%8c%e5%85%b7%e4%bd%93%e9%9c%80%e8%a6%81%e5%bc%95%e5%85%a5%e5%be%ae%e6%9c%8d%e5%8a%a1%e7%9a%84%e5%9c%ba%e6%99%af"></a>
二、具体需要引入微服务的场景
</h1><ol>
<li>组织与团队规模扩大
场景：开发团队从10人扩展到50人甚至上百人。所有开发者都在同一个代码库上工作，提交代码冲突不断，合并代码变成噩梦。</li>
</ol>
<p>微服务解决方案：按照业务边界（如用户、订单、支付、商品等）将大团队拆分成多个小团队（两个披萨团队）。每个团队负责一个或多个微服务，拥有从开发到运维的完整所有权，实现康威定律的逆向应用（架构驱动组织沟通）。</p>
        
        <hr><p>本文2025-08-19首发于<a href='https://lan-ke-people.github.io/lanke-hugo.github.io/'>烂柯的 Blog</a>，最后修改于2025-08-19</p>]]></description><category>微服务</category></item></channel></rss>